// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/MDASRPC.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MDAS {
  /// <summary>
  /// The MDAS service definition.
  /// </summary>
  public static partial class MDASServiceRPC
  {
    static readonly string __ServiceName = "MDAS.MDASServiceRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.InstantaneousSnapshotRequest> __Marshaller_MDAS_InstantaneousSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.InstantaneousSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.Reply> __Marshaller_MDAS_Reply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.Reply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.BlockLoadRequest> __Marshaller_MDAS_BlockLoadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.BlockLoadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.DailyLoadRequest> __Marshaller_MDAS_DailyLoadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.DailyLoadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.NamePlateParamsRequest> __Marshaller_MDAS_NamePlateParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.NamePlateParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.ProgrammableParamsReadRequest> __Marshaller_MDAS_ProgrammableParamsReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.ProgrammableParamsReadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.ProgrammableParamsWriteRequest> __Marshaller_MDAS_ProgrammableParamsWriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.ProgrammableParamsWriteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.EventLogRequest> __Marshaller_MDAS_EventLogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.EventLogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.BillingProfileRequest> __Marshaller_MDAS_BillingProfileRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.BillingProfileRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.ConfigurationUpdateRequest> __Marshaller_MDAS_ConfigurationUpdateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.ConfigurationUpdateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.restartRequest> __Marshaller_MDAS_restartRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.restartRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.getTaskListRequest> __Marshaller_MDAS_getTaskListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.getTaskListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MDAS.getTasksReply> __Marshaller_MDAS_getTasksReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MDAS.getTasksReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.InstantaneousSnapshotRequest, global::MDAS.Reply> __Method_readInstantaneousSnapshot = new grpc::Method<global::MDAS.InstantaneousSnapshotRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readInstantaneousSnapshot",
        __Marshaller_MDAS_InstantaneousSnapshotRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.BlockLoadRequest, global::MDAS.Reply> __Method_readBlockLoad = new grpc::Method<global::MDAS.BlockLoadRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readBlockLoad",
        __Marshaller_MDAS_BlockLoadRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.DailyLoadRequest, global::MDAS.Reply> __Method_readDailyLoad = new grpc::Method<global::MDAS.DailyLoadRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readDailyLoad",
        __Marshaller_MDAS_DailyLoadRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.NamePlateParamsRequest, global::MDAS.Reply> __Method_readNameplateparamsSnapshot = new grpc::Method<global::MDAS.NamePlateParamsRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readNameplateparamsSnapshot",
        __Marshaller_MDAS_NamePlateParamsRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.ProgrammableParamsReadRequest, global::MDAS.Reply> __Method_readProgrammableParams = new grpc::Method<global::MDAS.ProgrammableParamsReadRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readProgrammableParams",
        __Marshaller_MDAS_ProgrammableParamsReadRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.ProgrammableParamsWriteRequest, global::MDAS.Reply> __Method_writeProgrammableParams = new grpc::Method<global::MDAS.ProgrammableParamsWriteRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "writeProgrammableParams",
        __Marshaller_MDAS_ProgrammableParamsWriteRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.EventLogRequest, global::MDAS.Reply> __Method_readEventLog = new grpc::Method<global::MDAS.EventLogRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readEventLog",
        __Marshaller_MDAS_EventLogRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.BillingProfileRequest, global::MDAS.Reply> __Method_readBillingprofile = new grpc::Method<global::MDAS.BillingProfileRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "readBillingprofile",
        __Marshaller_MDAS_BillingProfileRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.ConfigurationUpdateRequest, global::MDAS.Reply> __Method_notifyConfigurationChange = new grpc::Method<global::MDAS.ConfigurationUpdateRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "notifyConfigurationChange",
        __Marshaller_MDAS_ConfigurationUpdateRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.restartRequest, global::MDAS.Reply> __Method_restartMDASEngine = new grpc::Method<global::MDAS.restartRequest, global::MDAS.Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "restartMDASEngine",
        __Marshaller_MDAS_restartRequest,
        __Marshaller_MDAS_Reply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MDAS.getTaskListRequest, global::MDAS.getTasksReply> __Method_getTaskList = new grpc::Method<global::MDAS.getTaskListRequest, global::MDAS.getTasksReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getTaskList",
        __Marshaller_MDAS_getTaskListRequest,
        __Marshaller_MDAS_getTasksReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MDAS.MDASRPCReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MDASServiceRPC</summary>
    [grpc::BindServiceMethod(typeof(MDASServiceRPC), "BindService")]
    public abstract partial class MDASServiceRPCBase
    {
      /// <summary>
      ///Used for reading instantaneous snapshot of a meter. Request type is InstantaneousSnapshotRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readInstantaneousSnapshot(global::MDAS.InstantaneousSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading block load data of a meter. Request type is BlockLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readBlockLoad(global::MDAS.BlockLoadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading daily load data of a meter. Request type is DailyLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readDailyLoad(global::MDAS.DailyLoadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading nameplate parameters snapshot of a meter. Request type is NamePlateParamsRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readNameplateparamsSnapshot(global::MDAS.NamePlateParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading programmable parameters of a meter. Request type is ProgrammableParamsReadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readProgrammableParams(global::MDAS.ProgrammableParamsReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for writing programmable parameters of a meter. Request type is ProgrammableParamsWriteRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> writeProgrammableParams(global::MDAS.ProgrammableParamsWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading event logs of a meter. Request type is EventLogRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readEventLog(global::MDAS.EventLogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Used for reading billing profile of a meter. Request type is BillingProfileRequest and response is Reply
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> readBillingprofile(global::MDAS.BillingProfileRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///notify MDAS engine about configuration change
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> notifyConfigurationChange(global::MDAS.ConfigurationUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///restarting MDAS Engine
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.Reply> restartMDASEngine(global::MDAS.restartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MDAS.getTasksReply> getTaskList(global::MDAS.getTaskListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MDASServiceRPC</summary>
    public partial class MDASServiceRPCClient : grpc::ClientBase<MDASServiceRPCClient>
    {
      /// <summary>Creates a new client for MDASServiceRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MDASServiceRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MDASServiceRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MDASServiceRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MDASServiceRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MDASServiceRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Used for reading instantaneous snapshot of a meter. Request type is InstantaneousSnapshotRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readInstantaneousSnapshot(global::MDAS.InstantaneousSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readInstantaneousSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading instantaneous snapshot of a meter. Request type is InstantaneousSnapshotRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readInstantaneousSnapshot(global::MDAS.InstantaneousSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readInstantaneousSnapshot, null, options, request);
      }
      /// <summary>
      ///Used for reading instantaneous snapshot of a meter. Request type is InstantaneousSnapshotRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readInstantaneousSnapshotAsync(global::MDAS.InstantaneousSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readInstantaneousSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading instantaneous snapshot of a meter. Request type is InstantaneousSnapshotRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readInstantaneousSnapshotAsync(global::MDAS.InstantaneousSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readInstantaneousSnapshot, null, options, request);
      }
      /// <summary>
      ///Used for reading block load data of a meter. Request type is BlockLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readBlockLoad(global::MDAS.BlockLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readBlockLoad(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading block load data of a meter. Request type is BlockLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readBlockLoad(global::MDAS.BlockLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readBlockLoad, null, options, request);
      }
      /// <summary>
      ///Used for reading block load data of a meter. Request type is BlockLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readBlockLoadAsync(global::MDAS.BlockLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readBlockLoadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading block load data of a meter. Request type is BlockLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readBlockLoadAsync(global::MDAS.BlockLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readBlockLoad, null, options, request);
      }
      /// <summary>
      ///Used for reading daily load data of a meter. Request type is DailyLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readDailyLoad(global::MDAS.DailyLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readDailyLoad(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading daily load data of a meter. Request type is DailyLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readDailyLoad(global::MDAS.DailyLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readDailyLoad, null, options, request);
      }
      /// <summary>
      ///Used for reading daily load data of a meter. Request type is DailyLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readDailyLoadAsync(global::MDAS.DailyLoadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readDailyLoadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading daily load data of a meter. Request type is DailyLoadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readDailyLoadAsync(global::MDAS.DailyLoadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readDailyLoad, null, options, request);
      }
      /// <summary>
      ///Used for reading nameplate parameters snapshot of a meter. Request type is NamePlateParamsRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readNameplateparamsSnapshot(global::MDAS.NamePlateParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readNameplateparamsSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading nameplate parameters snapshot of a meter. Request type is NamePlateParamsRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readNameplateparamsSnapshot(global::MDAS.NamePlateParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readNameplateparamsSnapshot, null, options, request);
      }
      /// <summary>
      ///Used for reading nameplate parameters snapshot of a meter. Request type is NamePlateParamsRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readNameplateparamsSnapshotAsync(global::MDAS.NamePlateParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readNameplateparamsSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading nameplate parameters snapshot of a meter. Request type is NamePlateParamsRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readNameplateparamsSnapshotAsync(global::MDAS.NamePlateParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readNameplateparamsSnapshot, null, options, request);
      }
      /// <summary>
      ///Used for reading programmable parameters of a meter. Request type is ProgrammableParamsReadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readProgrammableParams(global::MDAS.ProgrammableParamsReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readProgrammableParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading programmable parameters of a meter. Request type is ProgrammableParamsReadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readProgrammableParams(global::MDAS.ProgrammableParamsReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readProgrammableParams, null, options, request);
      }
      /// <summary>
      ///Used for reading programmable parameters of a meter. Request type is ProgrammableParamsReadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readProgrammableParamsAsync(global::MDAS.ProgrammableParamsReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readProgrammableParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading programmable parameters of a meter. Request type is ProgrammableParamsReadRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readProgrammableParamsAsync(global::MDAS.ProgrammableParamsReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readProgrammableParams, null, options, request);
      }
      /// <summary>
      ///Used for writing programmable parameters of a meter. Request type is ProgrammableParamsWriteRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply writeProgrammableParams(global::MDAS.ProgrammableParamsWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return writeProgrammableParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for writing programmable parameters of a meter. Request type is ProgrammableParamsWriteRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply writeProgrammableParams(global::MDAS.ProgrammableParamsWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_writeProgrammableParams, null, options, request);
      }
      /// <summary>
      ///Used for writing programmable parameters of a meter. Request type is ProgrammableParamsWriteRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> writeProgrammableParamsAsync(global::MDAS.ProgrammableParamsWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return writeProgrammableParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for writing programmable parameters of a meter. Request type is ProgrammableParamsWriteRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> writeProgrammableParamsAsync(global::MDAS.ProgrammableParamsWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_writeProgrammableParams, null, options, request);
      }
      /// <summary>
      ///Used for reading event logs of a meter. Request type is EventLogRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readEventLog(global::MDAS.EventLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readEventLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading event logs of a meter. Request type is EventLogRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readEventLog(global::MDAS.EventLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readEventLog, null, options, request);
      }
      /// <summary>
      ///Used for reading event logs of a meter. Request type is EventLogRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readEventLogAsync(global::MDAS.EventLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readEventLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading event logs of a meter. Request type is EventLogRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readEventLogAsync(global::MDAS.EventLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readEventLog, null, options, request);
      }
      /// <summary>
      ///Used for reading billing profile of a meter. Request type is BillingProfileRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readBillingprofile(global::MDAS.BillingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readBillingprofile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading billing profile of a meter. Request type is BillingProfileRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply readBillingprofile(global::MDAS.BillingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_readBillingprofile, null, options, request);
      }
      /// <summary>
      ///Used for reading billing profile of a meter. Request type is BillingProfileRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readBillingprofileAsync(global::MDAS.BillingProfileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return readBillingprofileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Used for reading billing profile of a meter. Request type is BillingProfileRequest and response is Reply
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> readBillingprofileAsync(global::MDAS.BillingProfileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_readBillingprofile, null, options, request);
      }
      /// <summary>
      ///notify MDAS engine about configuration change
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply notifyConfigurationChange(global::MDAS.ConfigurationUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return notifyConfigurationChange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///notify MDAS engine about configuration change
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply notifyConfigurationChange(global::MDAS.ConfigurationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_notifyConfigurationChange, null, options, request);
      }
      /// <summary>
      ///notify MDAS engine about configuration change
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> notifyConfigurationChangeAsync(global::MDAS.ConfigurationUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return notifyConfigurationChangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///notify MDAS engine about configuration change
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> notifyConfigurationChangeAsync(global::MDAS.ConfigurationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_notifyConfigurationChange, null, options, request);
      }
      /// <summary>
      ///restarting MDAS Engine
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply restartMDASEngine(global::MDAS.restartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return restartMDASEngine(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///restarting MDAS Engine
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.Reply restartMDASEngine(global::MDAS.restartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_restartMDASEngine, null, options, request);
      }
      /// <summary>
      ///restarting MDAS Engine
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> restartMDASEngineAsync(global::MDAS.restartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return restartMDASEngineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///restarting MDAS Engine
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.Reply> restartMDASEngineAsync(global::MDAS.restartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_restartMDASEngine, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.getTasksReply getTaskList(global::MDAS.getTaskListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTaskList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MDAS.getTasksReply getTaskList(global::MDAS.getTaskListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getTaskList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.getTasksReply> getTaskListAsync(global::MDAS.getTaskListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTaskListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MDAS.getTasksReply> getTaskListAsync(global::MDAS.getTaskListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getTaskList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MDASServiceRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MDASServiceRPCClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MDASServiceRPCBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_readInstantaneousSnapshot, serviceImpl.readInstantaneousSnapshot)
          .AddMethod(__Method_readBlockLoad, serviceImpl.readBlockLoad)
          .AddMethod(__Method_readDailyLoad, serviceImpl.readDailyLoad)
          .AddMethod(__Method_readNameplateparamsSnapshot, serviceImpl.readNameplateparamsSnapshot)
          .AddMethod(__Method_readProgrammableParams, serviceImpl.readProgrammableParams)
          .AddMethod(__Method_writeProgrammableParams, serviceImpl.writeProgrammableParams)
          .AddMethod(__Method_readEventLog, serviceImpl.readEventLog)
          .AddMethod(__Method_readBillingprofile, serviceImpl.readBillingprofile)
          .AddMethod(__Method_notifyConfigurationChange, serviceImpl.notifyConfigurationChange)
          .AddMethod(__Method_restartMDASEngine, serviceImpl.restartMDASEngine)
          .AddMethod(__Method_getTaskList, serviceImpl.getTaskList).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MDASServiceRPCBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_readInstantaneousSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.InstantaneousSnapshotRequest, global::MDAS.Reply>(serviceImpl.readInstantaneousSnapshot));
      serviceBinder.AddMethod(__Method_readBlockLoad, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.BlockLoadRequest, global::MDAS.Reply>(serviceImpl.readBlockLoad));
      serviceBinder.AddMethod(__Method_readDailyLoad, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.DailyLoadRequest, global::MDAS.Reply>(serviceImpl.readDailyLoad));
      serviceBinder.AddMethod(__Method_readNameplateparamsSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.NamePlateParamsRequest, global::MDAS.Reply>(serviceImpl.readNameplateparamsSnapshot));
      serviceBinder.AddMethod(__Method_readProgrammableParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.ProgrammableParamsReadRequest, global::MDAS.Reply>(serviceImpl.readProgrammableParams));
      serviceBinder.AddMethod(__Method_writeProgrammableParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.ProgrammableParamsWriteRequest, global::MDAS.Reply>(serviceImpl.writeProgrammableParams));
      serviceBinder.AddMethod(__Method_readEventLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.EventLogRequest, global::MDAS.Reply>(serviceImpl.readEventLog));
      serviceBinder.AddMethod(__Method_readBillingprofile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.BillingProfileRequest, global::MDAS.Reply>(serviceImpl.readBillingprofile));
      serviceBinder.AddMethod(__Method_notifyConfigurationChange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.ConfigurationUpdateRequest, global::MDAS.Reply>(serviceImpl.notifyConfigurationChange));
      serviceBinder.AddMethod(__Method_restartMDASEngine, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.restartRequest, global::MDAS.Reply>(serviceImpl.restartMDASEngine));
      serviceBinder.AddMethod(__Method_getTaskList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MDAS.getTaskListRequest, global::MDAS.getTasksReply>(serviceImpl.getTaskList));
    }

  }
}
#endregion
